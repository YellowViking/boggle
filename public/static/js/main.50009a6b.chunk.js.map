{"version":3,"sources":["logo.svg","Cell.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Cell","props","letter","addLetter","renderText","toUpperCase","react_default","a","createElement","disabled","className","onClick","e","preventDefault","Board","board","console","log","map","row","rowIndex","key","colIndex","src_Cell","Object","assign","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","undefined","word","pending","handleChange","bind","assertThisInitialized","handleSubmit","axios","get","data","setState","event","target","value","post","result","src","logo","alt","onSubmit","type","name","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50009a6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction Cell(props) {\r\n    let {letter, addLetter} = props;\r\n    let renderText = letter.toUpperCase();\r\n    if (renderText === 'q') {\r\n        renderText = 'Qu'\r\n    }\r\n\r\n    function handleClick(e) {\r\n        e.preventDefault();\r\n        addLetter(letter);\r\n    }\r\n\r\n    return <button disabled={props.disabled} className={\"cell\"} onClick={handleClick}>{renderText}</button>\r\n}\r\n\r\nexport default Cell","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cell from \"./Cell\";\nimport axios from 'axios';\n\nfunction Board(props) {\n    let {board} = props;\n    console.log(board);\n    if (board)\n        return board.map((row, rowIndex) =>\n            <div key={rowIndex}>{row.map((letter, colIndex) => <Cell key={colIndex}\n                                                                     letter={letter} {...props}/>)}</div>)\n    else {\n        return <p>Fetching... board</p>\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: undefined,\n            word: \"\",\n            pending: false,\n            board: undefined\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.addLetter = this.addLetter.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState({board: (await axios.get('/game')).data})\n    }\n\n    handleChange(event) {\n        this.setState({word: event.target.value});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        let {board, word} = this.state;\n        this.setState({pending: true, message: 'validating your answer'});\n        let result = (await axios.post('/validate', {board, word})).data;\n        this.setState({pending: false, message: result ? 'You got it!' : 'oops! try again!'})\n    }\n\n    addLetter(letter) {\n        this.setState({word: this.state.word + letter})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <p>\n                        Click on the Cell to add a letter\n                    </p>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Your Input:\n                            <input type=\"text\" name=\"name\" value={this.state.word} onChange={this.handleChange}/>\n                        </label>\n                        <Board addLetter={this.addLetter} board={this.state.board} disabled={this.state.pending}/>\n                        {this.state.message && <p>{this.state.message}</p>}\n                        <input type=\"submit\" value=\"Check!\" disabled={this.state.pending}/>\n                    </form>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}